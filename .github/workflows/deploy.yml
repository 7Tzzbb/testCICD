name: Next.js Static Export and Deploy  # 工作流名称：用于 Next.js 项目的构建和部署

on:
  push:
    branches:
      - main  # 仅当代码推送到 main 分支时触发工作流

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 使用最新版 Ubuntu 作为运行环境

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        # 第一步：拉取当前仓库的代码到 GitHub Actions runner 环境

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        # 第二步：安装指定版本的 Node.js（这里是 v18）

      - name: Install pnpm
        run: npm install -g pnpm
        # 第三步：全局安装 pnpm，作为包管理工具

      - name: Install dependencies
        run: pnpm install
        # 第四步：使用 pnpm 安装项目依赖（会根据 pnpm-lock.yaml 安装精准依赖）

      - name: Build & Export Next.js static site
        run: pnpm run build
        # 第五步：执行构建命令，生成静态文件并输出到 out 目录

      - name: List files in out directory for debugging
        run: ls -la ./out
        # 第六步：列出 out 目录内容，用于调试确认静态文件是否正确生成

      - name: Move out contents to root
        run: |
          shopt -s dotglob            # 开启 dotglob，使 * 匹配隐藏文件（如 .nojekyll）
          mv ./out/* ./               # 移动 out 目录下的所有内容（包括隐藏文件）到当前目录
          rmdir ./out                 # 删除空的 out 目录
        # 第七步：将 out 目录中的内容移至项目根目录，以便上传时不包含 out 本身

      - name: Deploy to server with SSH key
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}         # 目标服务器 IP 或域名（配置在 Secrets 中）
          username: ${{ secrets.DEPLOY_USER }}     # SSH 登录用户名
          key: ${{ secrets.SSH_PRIVATE_KEY }}      # SSH 私钥（配置在 Secrets 中）
          port: 22                                 # SSH 端口，默认 22
          source: "./out/*"                        # 上传当前目录下的所有内容（不包含 out 目录）
          target: "/home/wwwroot/www.next.com/"    # 服务器部署目录路径
        # 第八步：通过 SSH 上传构建后的静态文件到远程服务器，完成部署
